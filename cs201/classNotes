1/13:

Let |e| be the meaning of the exponent bits (as an unsigned integer)
let |m| be the meaning of the significand bits (as a sum of fractional powers of two)
let |s| be the meaning of the sign bit

the formula (for the normalized cases) is:
(-1)^|s| * 2^(|e| - 127) * (1 + |m|)

A word on the interpretation of |m|:
Let's pretend we have an 8 bit number interpreted as a sum of fractional powers of two

11010001 =>

2^-1 + 2^-2 + 0*2^-3 + 2^-4 + 0*2^-5 + 0*2^-6 + 0*2^-7 + 2^-8

1/2 + 1/4 + 1/16 + 1/256 =
128/256 + 64/256 + 16/256 + 1/256

If we have 23 bits, then our powers range from
2^-1 --> 2^-24

and the numbers we can represent range from 2^-24 -> (1 - 2^-24)

(1+ |m|) ===> ranges from 1 to *almost* 2

it can't *be* 2 because otherwise

(-s)^s*2^(|e| - 127) * 2 = (-1)^s*2^(|e| + 1 - 127) * 1

two ways to represent the same number. Real bad, we don't want that

-------------

1 00111111 1010 0000 0000 0000 0000 0000 000

(-1)^1 * s^(|63 - 127)
(-1)^1 * s^(-64) * (13/8)
= -13 * 2^(-72)

denormalized:

all 0s is 0 (but can be +/- 0)
exponent all 1s and the significant all 0s is +/- infinity
exponent all 1s and the significand NOT all 0s is NaN
if the exponent is all 0s then:
(-1)^s * 2^(-126) * |m|


---
* Posits

Competing standard, might be the future???
(Probably won't be)

Two parameters to set:

n is the number of bits total
es is the maximum number of exponent bits

(-1)^s * (2^(2^es * k)) * 2^|e| * (1 + |m|)

The way you read a posit number is:
You read the sign bit
Look at the next bit, if it's a 1, keep counting 1s until you reach the end of the number **or** you hit a 0. Call the number of bits counted |r|
The number k becomes the number of bits you counted - 1
k = |r| -1

If the next bit after the sign is a 0, keep counting 0s until you reach the end of the number, or you hit a 1. Call the number of bits you counted |r|. The number k becomes -1*|r|

Once you founted to find k, if you haven't reached the end of the number, take **up to** es bits and call that the exponent

If you haven't reached the end of the number collecting es bits, then the remaining bits are the significand

Let n = 8, es = 2

01101101

We have a zero, we counted two ones beyond it

1 * (2^(2^es)) * 2^3 * (1 + 1/4)
== 2^4 * 2^3 * (5/4) == 5 * 2^5


---------------------

A stack is a data structure with two primary operations:

push and pop

void push(int x, struct Stack* s);

int pop(struct Stack* s);

For the assignment Teacher's expecting:

define a struct for the Stack type (two obvious ways to do this would be as a linked list or as an array with a length in the struct)

Define the push and pop operations above

write a tiny program that demonstrates that the structure works correctly

Reminder: A stack is last in-first out

struct Stack s; // initialized somehow
...
push(s, 2);
printf("The last value put in is %d\n", pop(s));

// This should print "The last value put in is 2"

----------------------

**Assembly**
Specifically x86-64

"Assembly language" more like a family of dialects that all turn into the same instruction set on the architecture 

We will be using the gnu assembler (the =as= command)

(other assemblers on linux include nasm)

Two major conventions: AT&T vs Intel

gnu assembler defaults to the AT&T syntax

PSU uses the AT&T syntax

ergo we will use the AT&T syntax

(intel is pretty nice though)